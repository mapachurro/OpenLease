"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default("decoder:decode");
const memory_1 = __importDefault(require("./memory"));
const storage_1 = __importDefault(require("./storage"));
const stack_1 = require("./stack");
const calldata_1 = __importDefault(require("./calldata"));
const constant_1 = __importDefault(require("./constant"));
const special_1 = __importDefault(require("./special"));
const Pointer = __importStar(require("../types/pointer"));
function decode(definition, pointer, info, web3, contractAddress) {
    return __awaiter(this, void 0, void 0, function* () {
        debug("Decoding %s", definition.name);
        debug("pointer %O", pointer);
        if (Pointer.isStoragePointer(pointer)) {
            return yield storage_1.default(definition, pointer, info, web3, contractAddress);
        }
        if (Pointer.isStackPointer(pointer)) {
            return yield stack_1.decodeStack(definition, pointer, info, web3, contractAddress);
            //stack may contain pointer to storage so may need web3 & contractAddress
        }
        if (Pointer.isStackLiteralPointer(pointer)) {
            return yield stack_1.decodeLiteral(definition, pointer, info, web3, contractAddress);
            //literal may contain pointer to storage so may need web3 & contractAddress
        }
        if (Pointer.isConstantDefinitionPointer(pointer)) {
            return yield constant_1.default(definition, pointer, info);
            //I'd like to just use decodeValue, but unfortunately there are some special
            //cases to deal with
        }
        if (Pointer.isSpecialPointer(pointer)) {
            return yield special_1.default(definition, pointer, info);
        }
        //NOTE: the following two cases shouldn't come up but they've been left in as
        //fallback cases
        if (Pointer.isMemoryPointer(pointer)) {
            return yield memory_1.default(definition, pointer, info);
            //memory does not need web3 & contractAddress
        }
        if (Pointer.isCalldataPointer(pointer)) {
            return yield calldata_1.default(definition, pointer, info);
            //calldata does not need web3 & contractAddress
        }
    });
}
exports.default = decode;
//# sourceMappingURL=index.js.map