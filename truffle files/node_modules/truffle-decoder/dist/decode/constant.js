"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default("decoder:decode:constant");
const DecodeUtils = __importStar(require("truffle-decode-utils"));
const read_1 = __importDefault(require("../read"));
const value_1 = __importDefault(require("./value"));
function decodeConstant(definition, pointer, info) {
    return __awaiter(this, void 0, void 0, function* () {
        debug("definition %O", definition);
        debug("pointer %o", pointer);
        //normally, we just dispatch to decodeValue.
        //for statically-sized bytes, however, we need to make a special case.
        //you see, decodeValue expects to find the bytes at the *beginning*
        //of the word, but readDefinition will put them at the *end* of the
        //word.  So we'll have to adjust things ourselves.
        if (DecodeUtils.Definition.typeClass(definition) === "bytes") {
            let size = DecodeUtils.Definition.specifiedSize(definition);
            if (size !== null) {
                let word = yield read_1.default(pointer, info.state);
                let bytes = word.slice(DecodeUtils.EVM.WORD_SIZE - size);
                return DecodeUtils.Conversion.toHexString(bytes);
            }
        }
        //otherwise, as mentioned, just dispatch to decodeValue
        return yield value_1.default(definition, pointer, info);
    });
}
exports.default = decodeConstant;
//# sourceMappingURL=constant.js.map