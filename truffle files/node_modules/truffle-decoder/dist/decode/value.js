"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default("decoder:decode:value");
const read_1 = __importDefault(require("../read"));
const DecodeUtils = __importStar(require("truffle-decode-utils"));
function decodeValue(definition, pointer, info, web3, contractAddress) {
    return __awaiter(this, void 0, void 0, function* () {
        const { state } = info;
        let bytes = yield read_1.default(pointer, state, web3, contractAddress);
        if (bytes == undefined) {
            // debug("segfault, pointer %o, state: %O", pointer, state);
            return undefined;
        }
        debug("definition %O", definition);
        debug("pointer %o", pointer);
        switch (DecodeUtils.Definition.typeClass(definition)) {
            case "bool":
                return !DecodeUtils.Conversion.toBN(bytes).isZero();
            case "uint":
                return DecodeUtils.Conversion.toBN(bytes);
            case "int":
                return DecodeUtils.Conversion.toSignedBN(bytes);
            case "contract": //contract will get separate decoding later
            case "address":
                return DecodeUtils.Conversion.toAddress(bytes);
            case "bytes":
                // debug("typeIdentifier %s %o", DecodeUtils.typeIdentifier(definition), bytes);
                //if there's a static size, we want to truncate to that length
                let length = DecodeUtils.Definition.specifiedSize(definition);
                if (length !== null) {
                    bytes = bytes.slice(0, length);
                }
                //we don't need to pass in length here, since that's for *adding* padding
                return DecodeUtils.Conversion.toHexString(bytes);
            case "string":
                // debug("typeIdentifier %s %o", DecodeUtils.typeIdentifier(definition), bytes);
                if (typeof bytes == "string") {
                    return bytes;
                }
                return String.fromCharCode.apply(undefined, bytes);
            case "enum":
                const numRepresentation = DecodeUtils.Conversion.toBN(bytes).toNumber();
                debug("numRepresentation %d", numRepresentation);
                const referenceId = definition.referencedDeclaration || (definition.typeName ? definition.typeName.referencedDeclaration : undefined);
                const enumDeclaration = info.referenceDeclarations[referenceId];
                const decodedValue = enumDeclaration.members[numRepresentation].name;
                return {
                    type: enumDeclaration.name,
                    value: enumDeclaration.name + "." + decodedValue
                };
            default:
                // debug("Unknown value type: %s", DecodeUtils.typeIdentifier(definition));
                return undefined;
        }
    });
}
exports.default = decodeValue;
//# sourceMappingURL=value.js.map