"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const decode_1 = __importDefault(require("../decode"));
const contract_decoder_1 = __importDefault(require("./contract-decoder"));
var storage_1 = require("../allocate/storage");
exports.getStorageAllocations = storage_1.getStorageAllocations;
exports.storageSize = storage_1.storageSize;
var calldata_1 = require("../allocate/calldata");
exports.getCalldataAllocations = calldata_1.getCalldataAllocations;
var memory_1 = require("../allocate/memory");
exports.getMemoryAllocations = memory_1.getMemoryAllocations;
var stack_1 = require("../read/stack");
exports.readStack = stack_1.readStack;
var storage_2 = require("../read/storage");
exports.slotAddress = storage_2.slotAddress;
function forContract(contract, relevantContracts, provider, address) {
    return new contract_decoder_1.default(contract, relevantContracts, provider, address);
}
exports.forContract = forContract;
function forEvmState(definition, pointer, info) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield decode_1.default(definition, pointer, info);
    });
}
exports.forEvmState = forEvmState;
//# sourceMappingURL=index.js.map