'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sha3num = exports.sha3withsize = undefined;

var _web = require('web3');

var _web2 = _interopRequireDefault(_web);

var _leftPad = require('left-pad');

var _leftPad2 = _interopRequireDefault(_leftPad);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var web3 = new _web2.default();

// the size of a character in a hex string in bytes
var HEX_CHAR_SIZE = 4;

// the size to hash an integer if not explicity provided
var DEFAULT_SIZE = 256;

/** Encodes a value in hex and adds padding to the given size if needed. Tries to determine whether it should be encoded as a number or string. Curried args. */
var encodeWithPadding = function encodeWithPadding(size) {
  return function (value) {
    return typeof value === 'string'
    // non-hex string
    ? web3.toHex(value)
    // numbers, big numbers, and hex strings
    : encodeNum(size)(value);
  };
};

/** Encodes a number in hex and adds padding to the given size if needed. Curried args. */
var encodeNum = function encodeNum(size) {
  return function (value) {
    return (0, _leftPad2.default)(web3.toHex(value < 0 ? value >>> 0 : value).slice(2), size / HEX_CHAR_SIZE, value < 0 ? 'F' : '0');
  };
};

/** Hashes one or more arguments, using a default size for numbers. */

exports.default = function () {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var paddedArgs = args.map(encodeWithPadding(DEFAULT_SIZE)).join('');
  return web3.sha3(paddedArgs, { encoding: 'hex' });
};

/** Hashes a single value at the given size. */


var sha3withsize = exports.sha3withsize = function sha3withsize(value, size) {
  var paddedArgs = encodeWithPadding(size)(value);
  return web3.sha3(paddedArgs, { encoding: 'hex' });
};

var sha3num = exports.sha3num = function sha3num(value) {
  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_SIZE;

  var paddedArgs = encodeNum(size)(value);
  return web3.sha3(paddedArgs, { encoding: 'hex' });
};