"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const evm_1 = require("./evm");
const definition_1 = require("./definition");
const conversion_1 = require("./conversion");
const bn_js_1 = __importDefault(require("bn.js"));
var Allocation;
(function (Allocation) {
    ;
    ;
    /**
     * Allocate storage for given variable declarations
     *
     * Postcondition: starts a new slot and occupies whole slots
     */
    function allocateDeclarations(declarations, refs, slot = { offset: new bn_js_1.default(0) }, index = evm_1.EVM.WORD_SIZE - 1) {
        if (index < evm_1.EVM.WORD_SIZE - 1) { // starts a new slot
            slot = {
                path: slot,
                offset: new bn_js_1.default(1)
            };
            index = evm_1.EVM.WORD_SIZE - 1;
        }
        let parentFrom = { slot, index: 0 };
        var parentTo = { slot, index: evm_1.EVM.WORD_SIZE - 1 };
        let mapping = {};
        for (let declaration of declarations) {
            let { from, to, next, children } = allocateDeclaration(declaration, refs, slot, index);
            mapping[declaration.id] = { from, to, name: declaration.name };
            if (children !== undefined) {
                mapping[declaration.id].children = children;
            }
            slot = next.slot;
            index = next.index;
            parentTo = { slot: to.slot, index: evm_1.EVM.WORD_SIZE - 1 };
        }
        if (index < evm_1.EVM.WORD_SIZE - 1) {
            slot = {
                path: slot,
                offset: new bn_js_1.default(1)
            };
            index = evm_1.EVM.WORD_SIZE - 1;
        }
        return {
            from: parentFrom,
            to: parentTo,
            next: { slot, index },
            children: mapping
        };
    }
    Allocation.allocateDeclarations = allocateDeclarations;
    function allocateValue(slot, index, bytes) {
        let from = (index - bytes + 1 >= 0)
            ? { slot, index: index - bytes + 1 }
            : {
                slot: {
                    path: slot.path || undefined,
                    offset: slot.offset.addn(1)
                },
                index: evm_1.EVM.WORD_SIZE - bytes
            };
        let to = { slot: from.slot, index: from.index + bytes - 1 };
        let next = (from.index == 0)
            ? {
                slot: {
                    path: from.slot.path || undefined,
                    offset: from.slot.offset.addn(1)
                },
                index: evm_1.EVM.WORD_SIZE - 1
            }
            : { slot: from.slot, index: from.index - 1 };
        return { from, to, next, children: {} };
    }
    Allocation.allocateValue = allocateValue;
    function allocateDeclaration(declaration, refs, slot, index) {
        let definition = refs[declaration.id].definition;
        var byteSize = definition_1.Definition.storageSize(definition); // yum
        if (definition_1.Definition.typeClass(definition) != "struct") {
            return allocateValue(slot, index, byteSize);
        }
        let struct = refs[definition.typeName.referencedDeclaration];
        // debug("struct: %O", struct);
        let result = allocateDeclarations(struct.variables || [], refs, slot, index);
        // debug("struct result %o", result);
        return result;
    }
    function normalizeSlot(inputSlot) {
        if ((typeof inputSlot === "string" && inputSlot.slice(0, 2) == "0x") || typeof inputSlot === "number") {
            return {
                offset: conversion_1.Conversion.toBN(inputSlot)
            };
        }
        if (inputSlot instanceof Array) {
            //
        }
        if (typeof inputSlot === "object") {
            // blargh
        }
        // not a known format, give the 0 slot
        return {
            offset: new bn_js_1.default(0)
        };
    }
    Allocation.normalizeSlot = normalizeSlot;
})(Allocation = exports.Allocation || (exports.Allocation = {}));
//# sourceMappingURL=allocation.js.map