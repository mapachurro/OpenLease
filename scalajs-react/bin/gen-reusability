#!/bin/env scala
// vim: set ft=scala :

val comma = ", "
def T(i: Int) = (64+i).toChar.toString

var rt = Seq.empty[String]
var ra = Seq.empty[String]

for (i <- (2 to 22)) {
  // def m (f: Int => String): List[String] = (1 to a).toList.map(f)
  // def mc(f: Int => String): String = m(f).mkString(comma)
  // def mt(f: Int => String): String = m(f).mkString("(",comma,")")

  def A(j: Int) = ('A'+j).toChar.toString
  def a(j: Int) = ('a'+j).toChar.toString
  val As = (0 until i) map A
  val as = (0 until i) map a
  val Ac = As mkString ","

  def AR = As.map(X => s"$X:Reusability") mkString ", "
  // def fs = As.map(X => s"${X.toLowerCase}←$X") mkString ";"

  def tupleImpl = (1 to i).map(j => s"(x._$j ~=~ y._$j)") mkString " && "

  rt :+= s"""
           |  implicit def tuple$i[$AR]: Reusability[($Ac)] =
           |    apply((x,y) ⇒ $tupleImpl)
         """.stripMargin

  ra :+= s"""
           |  @deprecated("Use Reusability.caseClass instead. This will be removed in 0.10.0.", "0.9.2")
           |  def caseclass$i[$AR, Z](z: Z ⇒ Option[($Ac)]): Reusability[Z] =
           |    Reusability[($Ac)].contramap(z(_).get)
         """.stripMargin


}
print(rt mkString "")
print(ra mkString "")
println()
